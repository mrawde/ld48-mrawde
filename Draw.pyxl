
def init_colors_from_sprite(row):
    let colors = []
    const spritesheet = TeamColors_sprite
    for i < spritesheet.size.x:
        push(colors, get_sprite_pixel_color(spritesheet[i][row], xy(0, 0)))
    return colors
const COLORS = init_colors_from_sprite(1)
const SECONDARY_COLORS = init_colors_from_sprite(0)
const HUD_LEVEL_FONT = font
const GROUND_COLOR = get_sprite_pixel_color(GroundTiles_sprite[0][0], xy(0, 0))

def draw_game(level_elem, player_state):
    draw_level(level_elem)
    draw_hud(game_progress)
    
    preserving_transform:
        compose_transform({
            pos: BOARD_OFFSET,
        })
        draw_path(player_state.path, SECONDARY_COLORS[player_state.curr_truck])
    
def draw_level(level_elem) preserving_transform:
    compose_transform({
        pos: BOARD_OFFSET,
    })
    
    const level_state = level_elem.state
    let tile_rand = make_random(level_state.num)

    for y < level_state.size.y:
        for x < level_state.size.x:
            const coord = xy(x, y)
            const i = to_index(level_state.size, coord)
            const corner = xy(x, y) * TILE_SIZE
            
            const spritesheet_x = random_integer(0, 3, tile_rand)
            const spritesheet_y = if level_state.visited[i] then 1 else 0
            const sprite = GroundTiles_sprite[spritesheet_x][spritesheet_y]
            const sprite_pos = corner + ½ TILE_SIZE
            draw_sprite({
                sprite: sprite,
                pos: sprite_pos,
                z: Z_TILE,
            })
            
    const goals = level_state.goals
    for i < size(goals):
        const goal = goals[i]
        draw_goal(i, goal)    
        
    const trucks = level_elem.trucks
    for i < size(trucks):
        const truck_elem = trucks[i]
        const truck_color = COLORS[i]
        draw_truck(truck_elem, truck_color)
    
    /*
    const curr_truck = player_state.curr_truck
    const curr_coord = trucks[curr_truck].coord
    draw_corner_rect({
        corner: curr_coord * TILE_SIZE,
        size: TILE_SIZE,
        outline: #000,
    })
    */
        
def draw_truck(truck_elem, truck_color):
    const offset = truck_elem.offset
    const corner = truck_elem.state.coord * TILE_SIZE + offset
    const sprite = Truck_sprite.idle.frame(0)
    const sprite_pos = corner + ½ TILE_SIZE
    draw_sprite({
        sprite: sprite,
        pos: sprite_pos, 
        z: Z_TRUCK,
    })
    
    const which_truck = truck_elem.which
    const color = COLORS[which_truck]
    const outline = SECONDARY_COLORS[which_truck]
    draw_disk({
        pos: sprite_pos,
        radius:TRUCK_DOT_RADIUS,
        color: color,
        outline: outline,
        z: Z_TRUCK,
    })
    
def draw_goal(truck_idx, goal):
    const corner = goal.coord * TILE_SIZE
    const truck_color = COLORS[truck_idx]
    const sec_color = SECONDARY_COLORS[truck_idx]
    const z = Z_TILE

    const spritesheet_x = truck_idx mod size(GroundTiles_sprite)
    const sprite = GroundTiles_sprite[spritesheet_x][2]
    const sprite_pos = corner + ½ TILE_SIZE
    draw_sprite({
        sprite: sprite,
        pos: sprite_pos,
        z: z,
    })
    
    // draw the platform as 4 rectangles
    const r_size = ½ TILE_SIZE
    for ry < 2:
        for rx < 2:
            const r_pos = (xy(0.5, 0.5) + xy(rx, ry)) * r_size
            draw_rect({
                pos: corner + r_pos,
                size: r_size - 2,
                outline: sec_color,
                z: z,
            })    
            
    draw_disk({
        pos: sprite_pos,
        radius: TRUCK_DOT_RADIUS,
        color: truck_color,
        outline: sec_color,
        z: z,
    })

def draw_hud(game_progress):
    const pack = PACKS[game_progress.curr_pack_idx]
    const level = pack.levels[game_progress.curr_level_idx]
    const level_num = level.num
    draw_text({
        pos: HUD_LEVEL_OFFSET,
        font: HUD_LEVEL_FONT,
        text: replace("N", {"N": level_num}),
        color: HUD_LEVEL_COLOR,
    })
        
def draw_path(path, color) preserving_transform:
    if size(path) < 1:
        return
    
    const z = Z_PATH
    compose_transform({
        pos: ½ TILE_SIZE,
        z: z,
    })
    
    let last = path[0]

    const width = 10
    const radius = if width > 2 then 0.5 * width else 0
    if radius:
        draw_disk({
            pos: last * TILE_SIZE,
            color: color,
            radius: radius,
        })

    for 0 < i < size(path):
        let curr = path[i]
        if radius:
            draw_disk({
                pos: curr * TILE_SIZE,
                color: color,
                radius: radius,
            })
        draw_line({
            A: last * TILE_SIZE,
            B: curr * TILE_SIZE,
            color: color,
            width: width,
        })
        last = curr


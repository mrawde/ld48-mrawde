LevelSelect
════════════════════════════════════════════════════════════════════════
// Put local state for the mode here.  Declare variables with let, constants with const, and functions with def.
let player_state

const LEVEL_FONT = weaver_10_font
def handle_player_input(gamepad, player_state, game_progress):
    let actions = {}
    const x_offset = LEVEL_SELECT_OFFSET.x
    const level_offset = 1.125 * LEVEL_SELECT_SIZE
    const level_text_color = LEVEL_SELECT_COLOR
    
    let button_states = []
    for pack_idx < size(PACKS):
        
        // this is where the levels draw
        let y_offset = LEVEL_SELECT_OFFSET.y + pack_idx*40

        const pack = PACKS[pack_idx]
        draw_text({
            pos: xy(x_offset, y_offset-8),
            font: LEVEL_FONT,
            text: pack.name,
            color: level_text_color,
        })
        const w = 10*1.125*LEVEL_SELECT_SIZE.x
        draw_line({
            A: xy(x_offset, y_offset-4),
            B: xy(x_offset + w, y_offset-4),
            color: level_text_color,
        })
        
        const farthest = game_progress.farthest[pack.id]
        for i < size(pack.levels):
            const level = pack.levels[i]
            const corner = xy(i, 0) * level_offset + xy(x_offset, y_offset)
            const level_text = replace("N", {N: level.num, })
            const finished = i < farthest
            const avail = i == farthest
            const disabled = i > farthest
            
            let text_color = #444
            if finished:
                text_color = LEVEL_SELECT_DONE_COLOR
            else if avail:
                text_color = level_text_color
            let bs = button_state({
                corner: corner,
                size: LEVEL_SELECT_SIZE,
                text_color: text_color,
                text: level_text,
                disabled: disabled,
            })
            bs.pack_idx = pack_idx
            bs.level_idx = i
            push(button_states, bs)
        y_offset += 1.3 LEVEL_SELECT_SIZE.y
        
        y_offset += LEVEL_FONT.line_height
        
    for bs in button_states:
        if bs.hover:
            player_state.level_idx = bs.level_idx
            player_state.pack_idx = bs.pack_idx
            
        if bs.clicked:
            actions.clicked = true
            
    if gamepad.xx:
        const pack = PACKS[player_state.pack_idx]
        player_state.level_idx += gamepad.xx
    if gamepad.yy:
        player_state.pack_idx += gamepad.yy
    
    player_state.pack_idx = clamp(player_state.pack_idx, 0, size(PACKS)-1)
    let pack = PACKS[player_state.pack_idx]
    while player_state.pack_idx > 0 and game_progress.farthest[pack.id] < 0:
        player_state.pack_idx--
        pack = PACKS[player_state.pack_idx]
        
    player_state.level_idx = clamp(player_state.level_idx, 0, game_progress.farthest[pack.id])
    target_y = get_target_y_for_pack(player_state.pack_idx)

    if gamepad.aa or gamepad.bb or gamepad.cc or gamepad.dd:
        actions.clicked = true
            
    return actions
    
def draw_level_sel(player_state):
    let x_offset = LEVEL_SELECT_OFFSET.x + player_state.level_idx * 1.125 * LEVEL_SELECT_SIZE.x
    let y_offset = LEVEL_SELECT_OFFSET.y + player_state.pack_idx*40

    draw_corner_rect({
        corner: xy(x_offset, y_offset) - 1,
        size: LEVEL_SELECT_SIZE+2,
        outline: LEVEL_SELECT_COLOR,
    })
    
def handle_actions(player_state, actions):
    
    if actions.clicked:
        game_progress.curr_pack_idx = player_state.pack_idx
        game_progress.curr_level_idx = player_state.level_idx
        set_mode(PlayLevel)

def draw_title():
    const title_font = hauer_12_font
    draw_text({
        font: title_font,
        text: TITLE_GAME_NAME,
        color: HUD_LEVEL_COLOR,
        shadow: #000,
        pos: TITLE_OFFSET,
    })

enter
────────────────────────────────────────────────────────────────────────
// This event runs when the mode is entered via set_mode() or push_mode().
device_control("set_mouse_cursor", "none")
//set_background(TitleScreen_sprite)

target_y = 50
player_state = {
    pack_idx: 0,
    level_idx: 0,
}

frame
────────────────────────────────────────────────────────────────────────
// This event runs 60 times per second. Game logic, simulation, user input, and drawing all go here.
bg_music_per_frame()
draw_mural()
draw_title()

update_cursor_hover()
draw_mouse_cursor()

let actions = handle_player_input(gamepad_array[0], player_state, game_progress)
handle_actions(player_state, actions)
draw_level_sel(player_state)

update_curr_drag()


leave
────────────────────────────────────────────────────────────────────────
update_curr_drag()
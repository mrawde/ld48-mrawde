// implements the numberlink logic
    
def can_move(level_state, player_state, dest_coord):

    const curr_truck = level_state.trucks[player_state.curr_truck]
    if manhattan(curr_truck.coord - dest_coord) != 1:
        return false
        
    if is_truck_at_goal(level_state, player_state.curr_truck):
        return false
        
    if not is_coord_valid_for_move(level_state, player_state, dest_coord):
        return false

    return true

def is_truck_at_goal(level_state, truck_idx):
    const curr_goal = get_goal_for_truck(level_state, truck_idx)
    const curr_truck = level_state.trucks[truck_idx]
    return eq(curr_truck.coord, curr_goal.coord)

def get_goal_for_truck(level_state, truck_idx):
    return level_state.goals[truck_idx]

def is_coord_valid_for_move(level_state, player_state, coord):
    if not is_on_board(level_state.size, coord):
        return false
        
    const dest_i = to_index(level_state.size, coord)
    if level_state.visited[dest_i]:
        return false
        
    // collide with other trucks
    for truck in level_state.trucks:
        if eq(truck.coord, coord):
            return false
            
    // collide with goals that are not ours
    for i < size(level_state.goals):
        const goal = level_state.goals[i]
        if i â‰  player_state.curr_truck and eq(goal.coord, coord):
            return false
            
    return true       

def is_level_done(level_state):
    for i < size(level_state.trucks):
        const truck = level_state.trucks[i]
        const goal = level_state.goals[i]
        if not eq(truck.coord, goal.coord):
            return false
    
    // special case the first level        
    if level_state.id == "surface_0":
        return true
    
    for visit in level_state.visited:
        if not visit:
            return false

    return true
